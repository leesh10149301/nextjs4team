generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

model board {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  title     String?   @default("")
  content   String?   @default("")
  likes     Int?
  updatedAt DateTime? @db.Timestamptz(6)
  username  String    @default("")

  @@schema("public")
}

model board_comment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  post_id   String   @db.Uuid 
  content   String?   @default("")
  updatedAt DateTime? @db.Timestamptz(6)
  username  String    @default("")

  @@schema("public")
}

model anon_user {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nickname   String     @db.VarChar(255)
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  messages   messages[]

  @@schema("public")
}

model gameResult {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  gameDate   String?
  gtime      DateTime? @db.Time(6)
  home       String?
  homeKey    String?
  hscore     Int?
  visit      String?
  visitKey   String?
  vscore     Int?
  kt_win     String?
  broadcast  String?

  @@schema("public")
}

model messages {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?    @db.Uuid
  content    String
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  anon_user  anon_user? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model player {
  id            BigInt   @id @default(autoincrement())
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  pcode         Int?
  playerName    String?
  backnum       Int?
  debutYear     Int?
  playerPrvwImg String?
  position      String?
  hittype       String?
  teamName      String?

  @@schema("public")
}

model sentence {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  sentence   String?
  count      Int?

  @@schema("public")
}

model userinfo {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username   String    @unique
  email      String    @unique
  password   String
  created_at DateTime? @default(now()) @db.Timestamp(6)

  @@schema("public")
}

model player {
  id            BigInt   @id @default(autoincrement())
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  p_code         Int?
  player_name    String?
  back_number       Int?
  debut_year     Int?
  image String?
  position      String?
  hit_type       String?
  team_name      String?
  homerun_histories homerun_history[]
}

model homerun_history {
  id       BigInt        @id @default(autoincrement())
  player_id BigInt
  x_coord   Float
  y_coord   Float
  player   player       @relation(fields: [player_id], references: [id])

  @@index([player_id])
}

